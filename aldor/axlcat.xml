<item_type>CATEGORY</item_type>
<id>PrimitiveArrayCategory</id>
<description>
 `PrimitiveArrayCategory' provides primitive array operations.

Author: AXIOM-XL library
Date Created: 1999
Keywords: array
</description>
<parameters>
<parameter>
<id>S</id>
<id>Type</id>
</parameter>
</parameters>
<directinh>
<type>
</type>
</directinh>
<exports>
<export>
<id>new</id>
<description>
 `new(n)' creates a new empty array with space for
n elements.
</description>
<type>
<fn_type>
<left>
<id>SingleInteger</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>new</id>
<description>
 `new(n,s)' creates a new array with n elements,
each initialized to s.
</description>
<type>
<fn_type>
<left>
<id>SingleInteger</id>
<id>S</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>dispose!</id>
<description>
 `dispose! a' indicates that `a' will no longer be used.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
</right>
</fn_type>
</type>
</export>
<export>
<id>set!</id>
<description>
 `v.n := s' sets the `n'-th element of `v' to `s'.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>SingleInteger</id>
<id>S</id>
</left>
<right>
<id>S</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>apply</id>
<description>
 `v.n' extracts the `n'-th element of `v'.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>SingleInteger</id>
</left>
<right>
<id>S</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>resize!</id>
<description>
 `resize!(v, oldsize, newsize)' returns an array with
the number of elements equal to newsize and containing
the first m elements of `v', where `m' is the minimum of
newsize and oldsize.  The value `v' must no longer be used.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<parameter>
<id>osz</id>
<id>SingleInteger</id>
</parameter>
<parameter>
<id>nsz</id>
<id>SingleInteger</id>
</parameter>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
</exports>
<item_type>CATEGORY</item_type>
<id>FortranFStringArray</id>
<description>
 Domains satisfying FortranFStringArray can be passed to Fortran
as values declared as `CHARACTER *(N) arg(M)'. That is, an array
of M elements, each element being a CHARACTER*N

This is a language defined category.
</description>
<parameters>
</parameters>
<directinh>
<type>
<id>FortranArray</id>
</type>
</directinh>
<exports>
<export>
<id>#</id>
<description>
 Length of the fixed-string elements.
</description>
<type>
<fn_type>
<left>
</left>
<right>
<qualify>
<id>SInt</id>
<id>Machine</id>
</qualify>
</right>
</fn_type>
</type>
</export>
</exports>
<item_type>CATEGORY</item_type>
<id>DenseStorageCategory</id>
<description>
 Domains which satisfy DenseStorageCategory promise to provide
exports that can be used to create arrays in which their values
are stored using their "natural" size, and allow their values to
be placed in RawRecords. For example, Byte values would be stored
using 8-bits while DoubleFloat would use 64.

Domains which satisfy this category and which define Rep as a
constant (not a macro) do not need to provide implementations
for the exports since the compiler will do this automatically.
However, if the value of Rep is not the same as the packed
representation, then the exports supplied by the compiler must
be over-ridden by defining replacements. See DoubleFloat and
Complex(R) for examples of how to do this.

Author: AXIOM-XL library
Date Created: 1999
Keywords: dense, packed, implicit
</description>
<parameters>
</parameters>
<directinh>
<type>
</type>
</directinh>
<exports>
<export>
<id>PackedArrayNew</id>
<description>
 Create a machine array with enough storage
for the specified number of elements. There
is no support for providing initial values.
</description>
<type>
<fn_type>
<left>
<qualify>
<id>SInt</id>
<id>Machine</id>
</qualify>
</left>
<right>
<qualify>
<id>Arr</id>
<id>Machine</id>
</qualify>
</right>
</fn_type>
</type>
</export>
<export>
<id>PackedArrayGet</id>
<description>
 Given a machine array, return the element
at the specified index. Note that zero-based
indexing is used.
</description>
<type>
<fn_type>
<left>
<qualify>
<id>Arr</id>
<id>Machine</id>
</qualify>
<qualify>
<id>SInt</id>
<id>Machine</id>
</qualify>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>PackedArraySet</id>
<description>
 Given a machine array replace the value at
the specified index with a new value. Note
that zero-based indexing is used.
</description>
<type>
<fn_type>
<left>
<qualify>
<id>Arr</id>
<id>Machine</id>
</qualify>
<qualify>
<id>SInt</id>
<id>Machine</id>
</qualify>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>PackedRecordSet</id>
<description>
 `PackedRecordSet(p, v)' writes the raw representation
of `v' into the machine address `p'. Use `pretend' to
view `p' as an Aldor record or array as appropriate.
</description>
<type>
<fn_type>
<left>
<qualify>
<id>Ptr</id>
<id>Machine</id>
</qualify>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>PackedRecordGet</id>
<description>
 `PackedRecordGet(p)' reads the raw representation of
a value from the machine address `p'. Use `pretend'
to view `p' as an Aldor record or array as appropriate.
</description>
<type>
<fn_type>
<left>
<qualify>
<id>Ptr</id>
<id>Machine</id>
</qualify>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>PackedRepSize</id>
<description>
 This function returns the amount of memory required
to store a raw value in a raw record.
</description>
<type>
<fn_type>
<left>
</left>
<right>
<qualify>
<id>SInt</id>
<id>Machine</id>
</qualify>
</right>
</fn_type>
</type>
</export>
</exports>
<item_type>CATEGORY</item_type>
<id>FortranFString</id>
<description>
 Domains satisfying FortranFString can be passed to Fortran as
values of type CHARACTER*N for fixed values of N.

This is a language defined category.
</description>
<parameters>
</parameters>
<directinh>
<type>
<id>DenseStorageCategory</id>
</type>
</directinh>
<exports>
<export>
<id>PackedArrayNew</id>
<description>
 Create a machine array with enough storage
for the specified number of elements. There
is no support for providing initial values.
</description>
<type>
<fn_type>
<left>
<qualify>
<id>SInt</id>
<id>Machine</id>
</qualify>
</left>
<right>
<qualify>
<id>Arr</id>
<id>Machine</id>
</qualify>
</right>
</fn_type>
</type>
</export>
<export>
<id>PackedArrayGet</id>
<description>
 Given a machine array, return the element
at the specified index. Note that zero-based
indexing is used.
</description>
<type>
<fn_type>
<left>
<qualify>
<id>Arr</id>
<id>Machine</id>
</qualify>
<qualify>
<id>SInt</id>
<id>Machine</id>
</qualify>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>PackedArraySet</id>
<description>
 Given a machine array replace the value at
the specified index with a new value. Note
that zero-based indexing is used.
</description>
<type>
<fn_type>
<left>
<qualify>
<id>Arr</id>
<id>Machine</id>
</qualify>
<qualify>
<id>SInt</id>
<id>Machine</id>
</qualify>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>PackedRecordSet</id>
<description>
 `PackedRecordSet(p, v)' writes the raw representation
of `v' into the machine address `p'. Use `pretend' to
view `p' as an Aldor record or array as appropriate.
</description>
<type>
<fn_type>
<left>
<qualify>
<id>Ptr</id>
<id>Machine</id>
</qualify>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>PackedRecordGet</id>
<description>
 `PackedRecordGet(p)' reads the raw representation of
a value from the machine address `p'. Use `pretend'
to view `p' as an Aldor record or array as appropriate.
</description>
<type>
<fn_type>
<left>
<qualify>
<id>Ptr</id>
<id>Machine</id>
</qualify>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>PackedRepSize</id>
<description>
 This function returns the amount of memory required
to store a raw value in a raw record.
</description>
<type>
<fn_type>
<left>
</left>
<right>
<qualify>
<id>SInt</id>
<id>Machine</id>
</qualify>
</right>
</fn_type>
</type>
</export>
<export>
<id>#</id>
<description>
 Length of the fixed-string values.
</description>
<type>
<fn_type>
<left>
</left>
<right>
<qualify>
<id>SInt</id>
<id>Machine</id>
</qualify>
</right>
</fn_type>
</type>
</export>
</exports>
<item_type>CATEGORY</item_type>
<id>FortranMultiArray</id>
<description>
 Domains which satisfy FortranMultiArray can be passed to
Fortran as multi-dimensional arrays. The exports defined
by this domain are generally only applied by the exports
for FortranArray, which in turn are automatically applied
by the compiler when array values are passed to Fortran.

This is NOT a language defined category.

Author: AXIOM-XL library
Date Created: 1999
Keywords: fortran, array, multi-dimensional
</description>
<parameters>
</parameters>
<directinh>
<type>
<id>FortranArray</id>
</type>
</directinh>
<exports>
<export>
<id>flatten</id>
<description>
 flatten(%, x, n, getter) is used to convert the
`multi-dimensional array `x' with `n'  rows into
a single-dimensional machine array organised in
Fortran format. The `getter' function is used to
extract individual rows from `x'.
</description>
<type>
<fn_type>
<left>
<parameter>
<id>A</id>
<id>Type</id>
</parameter>
<id>A</id>
<id>SingleInteger</id>
<fn_type>
<left>
<id>A</id>
<id>SingleInteger</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</left>
<right>
<qualify>
<id>Arr</id>
<id>Machine</id>
</qualify>
</right>
</fn_type>
</type>
</export>
<export>
<id>unflatten</id>
<description>
 unflatten(x, f, off, step) is used to update `x'
after it has been passed to Fortran as the raw
array `f'. The updated array elements start at
offset `off' (counting from 0) in `f' and are
`step' elements apart.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<qualify>
<id>Arr</id>
<id>Machine</id>
</qualify>
<qualify>
<id>SInt</id>
<id>Machine</id>
</qualify>
<qualify>
<id>SInt</id>
<id>Machine</id>
</qualify>
</left>
<right>
</right>
</fn_type>
</type>
</export>
</exports>
<item_type>CATEGORY</item_type>
<id>ElementaryFunctions</id>
<description>
 `ElementaryFunctions' provides the basic trigonometric and exponential
functions and their inverses.

Author: AXIOM-XL library
Date Created: 1992-94
Keywords: elementary functions, transcendental functions
</description>
<parameters>
</parameters>
<directinh>
<type>
</type>
</directinh>
<exports>
<export>
<id>exp</id>
<description>
 Exponential of `e'.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>sin</id>
<description>
 Circular trigonometric sine.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>cos</id>
<description>
 Circular trigonometric cosine.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>tan</id>
<description>
 Circular trigonometric tangent.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>sinh</id>
<description>
 Hyperbolic trigonometric sine.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>cosh</id>
<description>
 Hyperbolic trigonometric cosine.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>tanh</id>
<description>
 Hyperbolic trigonometric tangent.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>log</id>
<description>
 Natural logarithm.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>log10</id>
<description>
 Logarithm base 10.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>asin</id>
<description>
 Functional inverse of `sin'.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>acos</id>
<description>
 Functional inverse of `cos'.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>atan</id>
<description>
 Functional inverse of `tan'.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>asinh</id>
<description>
 Functional inverse of `sinh'.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>acosh</id>
<description>
 Functional inverse of `cosh'.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>atanh</id>
<description>
 Functional inverse of `tanh'.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>sqrt</id>
<description>
 Square root.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>root</id>
<description>
 General surd.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>SingleInteger</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>^</id>
<description>
 General exponentiation.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
</exports>
<item_type>CATEGORY</item_type>
<id>FloatingPointNumberSystem</id>
<description>
 `FloatingPointNumberSystem' provides the basic operations for a type which
approximates the real numbers as a floating point system.

Author: AXIOM-XL library
Date Created: 1992-94
Keywords: floating point, real, approximate, arithmetic
</description>
<parameters>
</parameters>
<directinh>
<type>
<fn>
<id>Join</id>
<id>OrderedRing</id>
<id>Field</id>
</fn>
</type>
</directinh>
<exports>
<export>
<id>=</id>
<description>
 Equality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>~=</id>
<description>
 Inequality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>TextWriter</id>
<id>%</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<fn_type>
<left>
<id>TextWriter</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</right>
</fn_type>
</type>
</export>
<export>
<id>sample</id>
<description>
 Example element.
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>hash</id>
<description>
 Hashing function.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>SingleInteger</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>case</id>
<description>
 for 'select' statements;
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_></id>
<description>
 Greater than test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<</id>
<description>
 Less than test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_>=</id>
<description>
 Greater than or equal test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<=</id>
<description>
 Less than or equal test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>max</id>
<description>
 Maximum argument.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>min</id>
<description>
 Minimum argument.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_></id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>x</id>
<id>%</id>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>x</id>
<id>%</id>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_>=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>x</id>
<id>%</id>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>x</id>
<id>%</id>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_></id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_>=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_></id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_>=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>0</id>
<description>
 Identity for addition.
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>+</id>
<description>
 Identity function.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>+</id>
<description>
 Addition.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>zero?</id>
<description>
 Test whether value equals 0.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>-</id>
<description>
 Negation.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>-</id>
<description>
 Subtraction.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>1</id>
<description>
 Identity for `*'
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>*</id>
<description>
 Multiplication
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>^</id>
<description>
 Exponentiation or error
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>Integer</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>coerce</id>
<description>
</description>
<type>
<fn_type>
<left>
<id>Integer</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>coerce</id>
<description>
</description>
<type>
<fn_type>
<left>
<id>SingleInteger</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>abs</id>
<description>
 Absolute value.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>sign</id>
<description>
 -1, 0, or 1.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>negative?</id>
<description>
 Test whether value is negative?
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>positive?</id>
<description>
 Test whether value is positive?
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>gcd</id>
<description>
 Greatest commond divisor.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>quo</id>
<description>
 Quotient leaving remainder.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>rem</id>
<description>
 Remainder.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>divide</id>
<description>
 Quotient-remainder pair.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>/</id>
<description>
 Division: a/b = a*inv(b).
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>\</id>
<description>
 Division: a\b = inv(a)*b
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>inv</id>
<description>
 Inverse.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>unit?</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>x</id>
<id>%</id>
</parameter>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>float</id>
<description>
 Floating point-style literals.
</description>
<type>
<fn_type>
<left>
<id>Literal</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Insignificance: a _<_< b =_> a+b=b
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_>_></id>
<description>
 Dominance:      a _>_> b =_> a+b=a
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>step</id>
<description>
 `step(n)(a,b)' yields `n' evenly
separated values on `[a,b]'
</description>
<type>
<fn_type>
<left>
<id>SingleInteger</id>
</left>
<right>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<fn>
<id>Generator</id>
<id>%</id>
</fn>
</right>
</fn_type>
</right>
</fn_type>
</type>
</export>
<export>
<id>integer</id>
<description>
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>Integer</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>fraction</id>
<description>
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>round</id>
<description>
</description>
<type>
<fn_type>
<left>
<id>%</id>
<fn>
<id>nearest</id>
</fn>
</left>
<right>
<id>Integer</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>prev</id>
<description>
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>next</id>
<description>
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>floor</id>
<description>
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>ceiling</id>
<description>
 Next (lowest, highest) respv.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>round+</id>
<description>
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
<fn>
<id>nearest</id>
</fn>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>round-</id>
<description>
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
<fn>
<id>nearest</id>
</fn>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>round*</id>
<description>
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
<fn>
<id>nearest</id>
</fn>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>round*+</id>
<description>
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
<id>%</id>
<fn>
<id>nearest</id>
</fn>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>round/</id>
<description>
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
<fn>
<id>nearest</id>
</fn>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>mantissa</id>
<description>
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>Integer</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>exponent</id>
<description>
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>Integer</id>
</right>
</fn_type>
</type>
</export>
</exports>
<item_type>CATEGORY</item_type>
<id>IntegerNumberSystem</id>
<description>
 `IntegerNumberSystem' provides the basic operations for a type which
represents a range of integers.

Author: AXIOM-XL library
Date Created: 1992-94
Keywords: integer, arithmetic
</description>
<parameters>
</parameters>
<directinh>
<type>
<fn>
<id>Join</id>
<id>OrderedRing</id>
<id>EuclideanDomain</id>
</fn>
</type>
</directinh>
<exports>
<export>
<id>=</id>
<description>
 Equality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>~=</id>
<description>
 Inequality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>TextWriter</id>
<id>%</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<fn_type>
<left>
<id>TextWriter</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</right>
</fn_type>
</type>
</export>
<export>
<id>sample</id>
<description>
 Example element.
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>hash</id>
<description>
 Hashing function.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>SingleInteger</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>case</id>
<description>
 for 'select' statements;
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_></id>
<description>
 Greater than test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<</id>
<description>
 Less than test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_>=</id>
<description>
 Greater than or equal test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<=</id>
<description>
 Less than or equal test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>max</id>
<description>
 Maximum argument.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>min</id>
<description>
 Minimum argument.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_></id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>x</id>
<id>%</id>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>x</id>
<id>%</id>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_>=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>x</id>
<id>%</id>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>x</id>
<id>%</id>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_></id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_>=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_></id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_>=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>0</id>
<description>
 Identity for addition.
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>+</id>
<description>
 Identity function.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>+</id>
<description>
 Addition.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>zero?</id>
<description>
 Test whether value equals 0.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>-</id>
<description>
 Negation.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>-</id>
<description>
 Subtraction.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>1</id>
<description>
 Identity for `*'
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>*</id>
<description>
 Multiplication
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>^</id>
<description>
 Exponentiation or error
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>Integer</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>coerce</id>
<description>
</description>
<type>
<fn_type>
<left>
<id>Integer</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>coerce</id>
<description>
</description>
<type>
<fn_type>
<left>
<id>SingleInteger</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>abs</id>
<description>
 Absolute value.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>sign</id>
<description>
 -1, 0, or 1.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>negative?</id>
<description>
 Test whether value is negative?
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>positive?</id>
<description>
 Test whether value is positive?
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>gcd</id>
<description>
 Greatest commond divisor.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>quo</id>
<description>
 Quotient leaving remainder.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>rem</id>
<description>
 Remainder.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>divide</id>
<description>
 Quotient-remainder pair.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>integer</id>
<description>
 Integer-style literals.
</description>
<type>
<fn_type>
<left>
<id>Literal</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>even?</id>
<description>
 Test whether the value is even.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>odd?</id>
<description>
 Test whether the value is odd.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>single?</id>
<description>
 Can a SingleInteger hold the value?
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>prev</id>
<description>
 Decrement the value by 1.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>next</id>
<description>
 Increment the value by 1.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>mod</id>
<description>
 Modulus.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>length</id>
<description>
 Length in bits.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>SingleInteger</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>shift</id>
<description>
 Shift by the a number of bits.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>SingleInteger</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>bit</id>
<description>
 Extract the desired bit.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>SingleInteger</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>retract</id>
<description>
 Convert to SingleInteger, if can.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>SingleInteger</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>intToString</id>
<description>
 convert to a string
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>String</id>
</right>
</fn_type>
</type>
</export>
</exports>
<item_type>CATEGORY</item_type>
<id>OrderedRing</id>
<description>
 `OrderedRing' provides arithmetic consistent with an ordering.

Author: AXIOM-XL library
Date Created: 1992-94
Keywords: arithmetic, order
</description>
<parameters>
</parameters>
<directinh>
<type>
<fn>
<id>Join</id>
<id>OrderedAbelianGroup</id>
<id>Ring</id>
</fn>
</type>
</directinh>
<exports>
<export>
<id>=</id>
<description>
 Equality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>~=</id>
<description>
 Inequality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>TextWriter</id>
<id>%</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<fn_type>
<left>
<id>TextWriter</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</right>
</fn_type>
</type>
</export>
<export>
<id>sample</id>
<description>
 Example element.
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>hash</id>
<description>
 Hashing function.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>SingleInteger</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>case</id>
<description>
 for 'select' statements;
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_></id>
<description>
 Greater than test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<</id>
<description>
 Less than test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_>=</id>
<description>
 Greater than or equal test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<=</id>
<description>
 Less than or equal test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>max</id>
<description>
 Maximum argument.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>min</id>
<description>
 Minimum argument.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_></id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>x</id>
<id>%</id>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>x</id>
<id>%</id>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_>=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>x</id>
<id>%</id>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>x</id>
<id>%</id>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_></id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_>=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_></id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_>=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>0</id>
<description>
 Identity for addition.
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>+</id>
<description>
 Identity function.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>+</id>
<description>
 Addition.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>zero?</id>
<description>
 Test whether value equals 0.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>-</id>
<description>
 Negation.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>-</id>
<description>
 Subtraction.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>1</id>
<description>
 Identity for `*'
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>*</id>
<description>
 Multiplication
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>^</id>
<description>
 Exponentiation or error
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>Integer</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>coerce</id>
<description>
</description>
<type>
<fn_type>
<left>
<id>Integer</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>coerce</id>
<description>
</description>
<type>
<fn_type>
<left>
<id>SingleInteger</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>abs</id>
<description>
 Absolute value.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>sign</id>
<description>
 -1, 0, or 1.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>negative?</id>
<description>
 Test whether value is negative?
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>positive?</id>
<description>
 Test whether value is positive?
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
</exports>
<item_type>CATEGORY</item_type>
<id>OrderedAbelianGroup</id>
<description>
 `OrderedAbelianGroup' provides group operations consistent with an order.

Author: AXIOM-XL library
Date Created: 1992-94
Keywords: arithmetic, order
</description>
<parameters>
</parameters>
<directinh>
<type>
<fn>
<id>Join</id>
<id>OrderedAbelianMonoid</id>
<id>AbelianGroup</id>
</fn>
</type>
</directinh>
<exports>
<export>
<id>=</id>
<description>
 Equality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>~=</id>
<description>
 Inequality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>TextWriter</id>
<id>%</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<fn_type>
<left>
<id>TextWriter</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</right>
</fn_type>
</type>
</export>
<export>
<id>sample</id>
<description>
 Example element.
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>hash</id>
<description>
 Hashing function.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>SingleInteger</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>case</id>
<description>
 for 'select' statements;
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_></id>
<description>
 Greater than test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<</id>
<description>
 Less than test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_>=</id>
<description>
 Greater than or equal test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<=</id>
<description>
 Less than or equal test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>max</id>
<description>
 Maximum argument.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>min</id>
<description>
 Minimum argument.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_></id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>x</id>
<id>%</id>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>x</id>
<id>%</id>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_>=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>x</id>
<id>%</id>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>x</id>
<id>%</id>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_></id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_>=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_></id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_>=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>0</id>
<description>
 Identity for addition.
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>+</id>
<description>
 Identity function.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>+</id>
<description>
 Addition.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>zero?</id>
<description>
 Test whether value equals 0.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>-</id>
<description>
 Negation.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>-</id>
<description>
 Subtraction.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
</exports>
<item_type>CATEGORY</item_type>
<id>OrderedAbelianMonoid</id>
<description>
 `OrderedAbelianMonoid' provides an addition consistent with an order.

Author: AXIOM-XL library
Date Created: 1992-94
Keywords: arithmetic, order
</description>
<parameters>
</parameters>
<directinh>
<type>
<fn>
<id>Join</id>
<id>Order</id>
<id>AbelianMonoid</id>
</fn>
</type>
</directinh>
<exports>
<export>
<id>=</id>
<description>
 Equality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>~=</id>
<description>
 Inequality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>TextWriter</id>
<id>%</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<fn_type>
<left>
<id>TextWriter</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</right>
</fn_type>
</type>
</export>
<export>
<id>sample</id>
<description>
 Example element.
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>hash</id>
<description>
 Hashing function.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>SingleInteger</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>case</id>
<description>
 for 'select' statements;
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_></id>
<description>
 Greater than test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<</id>
<description>
 Less than test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_>=</id>
<description>
 Greater than or equal test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<=</id>
<description>
 Less than or equal test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>max</id>
<description>
 Maximum argument.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>min</id>
<description>
 Minimum argument.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_></id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>x</id>
<id>%</id>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>x</id>
<id>%</id>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_>=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>x</id>
<id>%</id>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>x</id>
<id>%</id>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_></id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_>=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_></id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_>=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>0</id>
<description>
 Identity for addition.
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>+</id>
<description>
 Identity function.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>+</id>
<description>
 Addition.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>zero?</id>
<description>
 Test whether value equals 0.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
</exports>
<item_type>CATEGORY</item_type>
<id>FiniteField</id>
<description>
 `FiniteField' provides arithmetic on a finite set.

Author: AXIOM-XL library
Date Created: 1992-94
Keywords: arithmetic, field operations, division
</description>
<parameters>
</parameters>
<directinh>
<type>
<fn>
<id>Join</id>
<id>Finite</id>
<id>Field</id>
</fn>
</type>
</directinh>
<exports>
<export>
<id>=</id>
<description>
 Equality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>~=</id>
<description>
 Inequality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>TextWriter</id>
<id>%</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<fn_type>
<left>
<id>TextWriter</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</right>
</fn_type>
</type>
</export>
<export>
<id>sample</id>
<description>
 Example element.
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>hash</id>
<description>
 Hashing function.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>SingleInteger</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>case</id>
<description>
 for 'select' statements;
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>#</id>
<description>
 Number of values in the type.
</description>
<type>
<id>Integer</id>
</type>
</export>
<export>
<id>0</id>
<description>
 Identity for `+'
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>+</id>
<description>
 Identity.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>+</id>
<description>
 Addition.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>-</id>
<description>
 Negation.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>-</id>
<description>
 Subtraction.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>1</id>
<description>
 Identity for `*'
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>*</id>
<description>
 Multiplication
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>^</id>
<description>
 Exponentiation or error
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>Integer</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>coerce</id>
<description>
</description>
<type>
<fn_type>
<left>
<id>Integer</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>coerce</id>
<description>
</description>
<type>
<fn_type>
<left>
<id>SingleInteger</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>zero?</id>
<description>
 Test whether value equals 0.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>gcd</id>
<description>
 Greatest commond divisor.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>quo</id>
<description>
 Quotient leaving remainder.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>rem</id>
<description>
 Remainder.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>divide</id>
<description>
 Quotient-remainder pair.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>/</id>
<description>
 Division: a/b = a*inv(b).
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>\</id>
<description>
 Division: a\b = inv(a)*b
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>inv</id>
<description>
 Inverse.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>unit?</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>x</id>
<id>%</id>
</parameter>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>integer</id>
<description>
</description>
<type>
<fn_type>
<left>
<id>Literal</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>reduce</id>
<description>
</description>
<type>
<fn_type>
<left>
<id>SingleInteger</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>lift</id>
<description>
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>SingleInteger</id>
</right>
</fn_type>
</type>
</export>
</exports>
<item_type>CATEGORY</item_type>
<id>Field</id>
<description>
 `Field' provides arithmetic with division.

Author: AXIOM-XL library
Date Created: 1992-94
Keywords: arithmetic, field operations, division
</description>
<parameters>
</parameters>
<directinh>
<type>
<fn>
<id>Join</id>
<id>EuclideanDomain</id>
<id>Group</id>
</fn>
</type>
</directinh>
<exports>
<export>
<id>0</id>
<description>
 Identity for `+'
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>+</id>
<description>
 Identity.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>+</id>
<description>
 Addition.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>-</id>
<description>
 Negation.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>-</id>
<description>
 Subtraction.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>1</id>
<description>
 Identity for `*'
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>*</id>
<description>
 Multiplication
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>^</id>
<description>
 Exponentiation or error
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>Integer</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>coerce</id>
<description>
</description>
<type>
<fn_type>
<left>
<id>Integer</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>coerce</id>
<description>
</description>
<type>
<fn_type>
<left>
<id>SingleInteger</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>=</id>
<description>
 Equality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>~=</id>
<description>
 Inequality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>TextWriter</id>
<id>%</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<fn_type>
<left>
<id>TextWriter</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</right>
</fn_type>
</type>
</export>
<export>
<id>sample</id>
<description>
 Example element.
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>hash</id>
<description>
 Hashing function.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>SingleInteger</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>case</id>
<description>
 for 'select' statements;
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>zero?</id>
<description>
 Test whether value equals 0.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>gcd</id>
<description>
 Greatest commond divisor.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>quo</id>
<description>
 Quotient leaving remainder.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>rem</id>
<description>
 Remainder.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>divide</id>
<description>
 Quotient-remainder pair.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>/</id>
<description>
 Division: a/b = a*inv(b).
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>\</id>
<description>
 Division: a\b = inv(a)*b
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>inv</id>
<description>
 Inverse.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>unit?</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>x</id>
<id>%</id>
</parameter>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
</exports>
<item_type>CATEGORY</item_type>
<id>EuclideanDomain</id>
<description>
 `EuclideanDomain' provides ring operations and division with remainder.

Author: AXIOM-XL library
Date Created: 1992-94
Keywords: arithmetic, division, greatest common divisor, Euclidean domain
</description>
<parameters>
</parameters>
<directinh>
<type>
<id>Ring</id>
</type>
</directinh>
<exports>
<export>
<id>0</id>
<description>
 Identity for `+'
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>+</id>
<description>
 Identity.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>+</id>
<description>
 Addition.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>-</id>
<description>
 Negation.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>-</id>
<description>
 Subtraction.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>1</id>
<description>
 Identity for `*'
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>*</id>
<description>
 Multiplication
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>^</id>
<description>
 Exponentiation or error
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>Integer</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>coerce</id>
<description>
</description>
<type>
<fn_type>
<left>
<id>Integer</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>coerce</id>
<description>
</description>
<type>
<fn_type>
<left>
<id>SingleInteger</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>=</id>
<description>
 Equality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>~=</id>
<description>
 Inequality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>TextWriter</id>
<id>%</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<fn_type>
<left>
<id>TextWriter</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</right>
</fn_type>
</type>
</export>
<export>
<id>sample</id>
<description>
 Example element.
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>hash</id>
<description>
 Hashing function.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>SingleInteger</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>case</id>
<description>
 for 'select' statements;
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>zero?</id>
<description>
 Test whether value equals 0.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>gcd</id>
<description>
 Greatest commond divisor.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>quo</id>
<description>
 Quotient leaving remainder.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>rem</id>
<description>
 Remainder.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>divide</id>
<description>
 Quotient-remainder pair.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
<id>%</id>
</right>
</fn_type>
</type>
</export>
</exports>
<item_type>CATEGORY</item_type>
<id>Ring</id>
<description>
 `Ring' provides the basic arithmetic operations of
addition, subtraction and multiplication.

Author: AXIOM-XL library
Date Created: 1992-94
Keywords: arithmetic, ring operations
</description>
<parameters>
</parameters>
<directinh>
<type>
<fn>
<id>Join</id>
<id>ArithmeticSystem</id>
<id>Monoid</id>
<id>AbelianGroup</id>
</fn>
</type>
</directinh>
<exports>
<export>
<id>0</id>
<description>
 Identity for `+'
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>+</id>
<description>
 Identity.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>+</id>
<description>
 Addition.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>-</id>
<description>
 Negation.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>-</id>
<description>
 Subtraction.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>1</id>
<description>
 Identity for `*'
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>*</id>
<description>
 Multiplication
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>^</id>
<description>
 Exponentiation or error
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>Integer</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>coerce</id>
<description>
</description>
<type>
<fn_type>
<left>
<id>Integer</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>coerce</id>
<description>
</description>
<type>
<fn_type>
<left>
<id>SingleInteger</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>=</id>
<description>
 Equality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>~=</id>
<description>
 Inequality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>TextWriter</id>
<id>%</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<fn_type>
<left>
<id>TextWriter</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</right>
</fn_type>
</type>
</export>
<export>
<id>sample</id>
<description>
 Example element.
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>hash</id>
<description>
 Hashing function.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>SingleInteger</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>case</id>
<description>
 for 'select' statements;
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>zero?</id>
<description>
 Test whether value equals 0.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
</exports>
<item_type>CATEGORY</item_type>
<id>AbelianGroup</id>
<description>
 `AbelianGroup' provides additive arithmetic with subtraction.

Author: AXIOM-XL library
Date Created: 1992-94
Keywords: arithmetic, subtraction
</description>
<parameters>
</parameters>
<directinh>
<type>
<id>AbelianMonoid</id>
</type>
</directinh>
<exports>
<export>
<id>=</id>
<description>
 Equality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>~=</id>
<description>
 Inequality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>TextWriter</id>
<id>%</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<fn_type>
<left>
<id>TextWriter</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</right>
</fn_type>
</type>
</export>
<export>
<id>sample</id>
<description>
 Example element.
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>hash</id>
<description>
 Hashing function.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>SingleInteger</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>case</id>
<description>
 for 'select' statements;
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>0</id>
<description>
 Identity for addition.
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>+</id>
<description>
 Identity function.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>+</id>
<description>
 Addition.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>zero?</id>
<description>
 Test whether value equals 0.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>-</id>
<description>
 Negation.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>-</id>
<description>
 Subtraction.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
</exports>
<item_type>CATEGORY</item_type>
<id>AbelianMonoid</id>
<description>
 `AbelianMonoid' provides additive arithmetic.

Author: AXIOM-XL library
Date Created: 1992-94
Keywords: arithmetic, addition
</description>
<parameters>
</parameters>
<directinh>
<type>
<id>BasicType</id>
</type>
</directinh>
<exports>
<export>
<id>=</id>
<description>
 Equality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>~=</id>
<description>
 Inequality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>TextWriter</id>
<id>%</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<fn_type>
<left>
<id>TextWriter</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</right>
</fn_type>
</type>
</export>
<export>
<id>sample</id>
<description>
 Example element.
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>hash</id>
<description>
 Hashing function.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>SingleInteger</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>case</id>
<description>
 for 'select' statements;
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>0</id>
<description>
 Identity for addition.
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>+</id>
<description>
 Identity function.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>+</id>
<description>
 Addition.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>zero?</id>
<description>
 Test whether value equals 0.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
</exports>
<item_type>CATEGORY</item_type>
<id>Group</id>
<description>
 `Group' provides multiplicative arithmetic with division.

Author: AXIOM-XL library
Date Created: 1992-94
Keywords: arithmetic, group operations, multiplication, division
</description>
<parameters>
</parameters>
<directinh>
<type>
<id>Monoid</id>
</type>
</directinh>
<exports>
<export>
<id>=</id>
<description>
 Equality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>~=</id>
<description>
 Inequality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>TextWriter</id>
<id>%</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<fn_type>
<left>
<id>TextWriter</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</right>
</fn_type>
</type>
</export>
<export>
<id>sample</id>
<description>
 Example element.
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>hash</id>
<description>
 Hashing function.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>SingleInteger</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>case</id>
<description>
 for 'select' statements;
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>1</id>
<description>
 Identity for multiplication.
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>*</id>
<description>
 Multiplication.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>^</id>
<description>
 Exponentiation or error
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>Integer</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>/</id>
<description>
 Division: a/b = a*inv(b).
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>\</id>
<description>
 Division: a\b = inv(a)*b
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>inv</id>
<description>
 Inverse.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
</exports>
<item_type>CATEGORY</item_type>
<id>Monoid</id>
<description>
 `Monoid' provides multiplicative arithmetic.

Author: AXIOM-XL library
Date Created: 1992-94
Keywords: arithmetic, multiplication
</description>
<parameters>
</parameters>
<directinh>
<type>
<id>BasicType</id>
</type>
</directinh>
<exports>
<export>
<id>=</id>
<description>
 Equality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>~=</id>
<description>
 Inequality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>TextWriter</id>
<id>%</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<fn_type>
<left>
<id>TextWriter</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</right>
</fn_type>
</type>
</export>
<export>
<id>sample</id>
<description>
 Example element.
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>hash</id>
<description>
 Hashing function.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>SingleInteger</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>case</id>
<description>
 for 'select' statements;
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>1</id>
<description>
 Identity for multiplication.
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>*</id>
<description>
 Multiplication.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>^</id>
<description>
 Exponentiation or error
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>Integer</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
</exports>
<item_type>CATEGORY</item_type>
<id>ArithmeticSystem</id>
<description>
 `ArithmeticSystem' provides the basic aritmetic operations,
without implying associativity, commutativity, etc.
</description>
<parameters>
</parameters>
<directinh>
<type>
</type>
</directinh>
<exports>
<export>
<id>0</id>
<description>
 Identity for `+'
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>+</id>
<description>
 Identity.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>+</id>
<description>
 Addition.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>-</id>
<description>
 Negation.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>-</id>
<description>
 Subtraction.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>1</id>
<description>
 Identity for `*'
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>*</id>
<description>
 Multiplication
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>^</id>
<description>
 Exponentiation or error
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>Integer</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>coerce</id>
<description>
</description>
<type>
<fn_type>
<left>
<id>Integer</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>coerce</id>
<description>
</description>
<type>
<fn_type>
<left>
<id>SingleInteger</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
</exports>
<item_type>CATEGORY</item_type>
<id>OrderedFinite</id>
<description>
 `OrderedFinite' provides the minimum and maximum values for a finite type.

Author: AXIOM-XL library
Date Created: 1992-94
Keywords: finite, minimum, maximum
</description>
<parameters>
</parameters>
<directinh>
<type>
<fn>
<id>Join</id>
<id>Finite</id>
<id>Order</id>
</fn>
</type>
</directinh>
<exports>
<export>
<id>=</id>
<description>
 Equality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>~=</id>
<description>
 Inequality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>TextWriter</id>
<id>%</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<fn_type>
<left>
<id>TextWriter</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</right>
</fn_type>
</type>
</export>
<export>
<id>sample</id>
<description>
 Example element.
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>hash</id>
<description>
 Hashing function.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>SingleInteger</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>case</id>
<description>
 for 'select' statements;
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>#</id>
<description>
 Number of values in the type.
</description>
<type>
<id>Integer</id>
</type>
</export>
<export>
<id>_></id>
<description>
 Greater than test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<</id>
<description>
 Less than test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_>=</id>
<description>
 Greater than or equal test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<=</id>
<description>
 Less than or equal test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>max</id>
<description>
 Maximum argument.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>min</id>
<description>
 Minimum argument.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_></id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>x</id>
<id>%</id>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>x</id>
<id>%</id>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_>=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>x</id>
<id>%</id>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>x</id>
<id>%</id>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_></id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_>=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_></id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_>=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>min</id>
<description>
 Minimum value belonging to the type.
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>max</id>
<description>
 Maximum value belonging to the type.
</description>
<type>
<id>%</id>
</type>
</export>
</exports>
<item_type>CATEGORY</item_type>
<id>Order</id>
<description>
 `Order' provides operations for an order relation, `_>', and its dual, `_<'.

Author: AXIOM-XL library
Date Created: 1992-94
Keywords: inequality, order
</description>
<parameters>
</parameters>
<directinh>
<type>
<id>BasicType</id>
</type>
</directinh>
<exports>
<export>
<id>=</id>
<description>
 Equality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>~=</id>
<description>
 Inequality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>TextWriter</id>
<id>%</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<fn_type>
<left>
<id>TextWriter</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</right>
</fn_type>
</type>
</export>
<export>
<id>sample</id>
<description>
 Example element.
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>hash</id>
<description>
 Hashing function.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>SingleInteger</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>case</id>
<description>
 for 'select' statements;
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_></id>
<description>
 Greater than test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<</id>
<description>
 Less than test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_>=</id>
<description>
 Greater than or equal test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<=</id>
<description>
 Less than or equal test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>max</id>
<description>
 Maximum argument.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>min</id>
<description>
 Minimum argument.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_></id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>x</id>
<id>%</id>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>x</id>
<id>%</id>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_>=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>x</id>
<id>%</id>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>x</id>
<id>%</id>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_></id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_>=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>_></id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_>=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<=</id>
<description>
</description>
<type>
<fn_type>
<left>
<parameter>
<id>bx</id>
<fn>
<id>Cross</id>
<id>Boolean</id>
<id>%</id>
</fn>
</parameter>
<parameter>
<id>y</id>
<id>%</id>
</parameter>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
</exports>
<item_type>CATEGORY</item_type>
<id>Finite</id>
<description>
 `Finite' indicates that a type has only a finite number of values.

Author: AXIOM-XL library
Date Created: 1992-94
Keywords: finite, cardinality
</description>
<parameters>
</parameters>
<directinh>
<type>
<id>BasicType</id>
</type>
</directinh>
<exports>
<export>
<id>=</id>
<description>
 Equality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>~=</id>
<description>
 Inequality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>TextWriter</id>
<id>%</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<fn_type>
<left>
<id>TextWriter</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</right>
</fn_type>
</type>
</export>
<export>
<id>sample</id>
<description>
 Example element.
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>hash</id>
<description>
 Hashing function.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>SingleInteger</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>case</id>
<description>
 for 'select' statements;
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>#</id>
<description>
 Number of values in the type.
</description>
<type>
<id>Integer</id>
</type>
</export>
</exports>
<item_type>CATEGORY</item_type>
<id>FiniteLinearAggregate</id>
<description>
 `FiniteLinearAggregate(S)' provides operations for manipulating structures
representing finite linear collections of values of type `S'.

Author: AXIOM-XL library
Date Created: 1992-94
Keywords: aggregate, collection, container
</description>
<parameters>
<parameter>
<id>S</id>
<id>Type</id>
</parameter>
</parameters>
<directinh>
<type>
<fn>
<id>Join</id>
<fn>
<id>FiniteAggregate</id>
<id>S</id>
</fn>
<fn>
<id>LinearAggregate</id>
<id>S</id>
</fn>
</fn>
</type>
</directinh>
<exports>
<export>
<id>=</id>
<description>
 Equality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>~=</id>
<description>
 Inequality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>TextWriter</id>
<id>%</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<fn_type>
<left>
<id>TextWriter</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</right>
</fn_type>
</type>
</export>
<export>
<id>sample</id>
<description>
 Example element.
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>hash</id>
<description>
 Hashing function.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>SingleInteger</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>case</id>
<description>
 for 'select' statements;
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>empty?</id>
<description>
 Is the element count zero?
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>generator</id>
<description>
 Generic traversal of an aggregate.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<fn>
<id>Generator</id>
<id>S</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>map</id>
<description>
 Form new aggregate using function.
</description>
<type>
<fn_type>
<left>
<fn_type>
<left>
<id>S</id>
</left>
<right>
<id>S</id>
</right>
</fn_type>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>#</id>
<description>
 Count of the number of elements.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>SingleInteger</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>empty</id>
<description>
 Construction with no values.
</description>
<type>
<fn_type>
<left>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>bracket</id>
<description>
 Construction from a generator.
</description>
<type>
<fn_type>
<left>
<fn>
<id>Generator</id>
<id>S</id>
</fn>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>bracket</id>
<description>
 Construction from a tuple.
</description>
<type>
<fn_type>
<left>
<fn>
<id>Tuple</id>
<id>S</id>
</fn>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>map</id>
<description>
 Element-wise combination.
</description>
<type>
<fn_type>
<left>
<fn_type>
<left>
<id>S</id>
<id>S</id>
</left>
<right>
<id>S</id>
</right>
</fn_type>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>apply</id>
<description>
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>SingleInteger</id>
</left>
<right>
<id>S</id>
</right>
</fn_type>
</type>
</export>
</exports>
<item_type>CATEGORY</item_type>
<id>LinearAggregate</id>
<description>
 `LinearAggregate(S)' provides operations for manipulating structures
representing linear collections of values of type `S'.
!! For this release the constructors may generate errors if not given
!! suitable numbers of constituents.

Author: AXIOM-XL library
Date Created: 1992-94
Keywords: aggregate, collection, container
</description>
<parameters>
<parameter>
<id>S</id>
<id>Type</id>
</parameter>
</parameters>
<directinh>
<type>
<fn>
<id>Aggregate</id>
<id>S</id>
</fn>
</type>
</directinh>
<exports>
<export>
<id>=</id>
<description>
 Equality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>~=</id>
<description>
 Inequality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>TextWriter</id>
<id>%</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<fn_type>
<left>
<id>TextWriter</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</right>
</fn_type>
</type>
</export>
<export>
<id>sample</id>
<description>
 Example element.
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>hash</id>
<description>
 Hashing function.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>SingleInteger</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>case</id>
<description>
 for 'select' statements;
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>empty?</id>
<description>
 Is the element count zero?
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>generator</id>
<description>
 Generic traversal of an aggregate.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<fn>
<id>Generator</id>
<id>S</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>map</id>
<description>
 Form new aggregate using function.
</description>
<type>
<fn_type>
<left>
<fn_type>
<left>
<id>S</id>
</left>
<right>
<id>S</id>
</right>
</fn_type>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>empty</id>
<description>
 Construction with no values.
</description>
<type>
<fn_type>
<left>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>bracket</id>
<description>
 Construction from a generator.
</description>
<type>
<fn_type>
<left>
<fn>
<id>Generator</id>
<id>S</id>
</fn>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>bracket</id>
<description>
 Construction from a tuple.
</description>
<type>
<fn_type>
<left>
<fn>
<id>Tuple</id>
<id>S</id>
</fn>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>map</id>
<description>
 Element-wise combination.
</description>
<type>
<fn_type>
<left>
<fn_type>
<left>
<id>S</id>
<id>S</id>
</left>
<right>
<id>S</id>
</right>
</fn_type>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>apply</id>
<description>
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>SingleInteger</id>
</left>
<right>
<id>S</id>
</right>
</fn_type>
</type>
</export>
</exports>
<item_type>CATEGORY</item_type>
<id>FiniteAggregate</id>
<description>
 `FiniteAggregate(S)' provides operations for manipulating structures
representing finite collections of values of type `S'.

Author: AXIOM-XL library
Date Created: 1992-94
Keywords: aggregate, collection, container
</description>
<parameters>
<parameter>
<id>S</id>
<id>Type</id>
</parameter>
</parameters>
<directinh>
<type>
<fn>
<id>Aggregate</id>
<id>S</id>
</fn>
</type>
</directinh>
<exports>
<export>
<id>=</id>
<description>
 Equality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>~=</id>
<description>
 Inequality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>TextWriter</id>
<id>%</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<fn_type>
<left>
<id>TextWriter</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</right>
</fn_type>
</type>
</export>
<export>
<id>sample</id>
<description>
 Example element.
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>hash</id>
<description>
 Hashing function.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>SingleInteger</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>case</id>
<description>
 for 'select' statements;
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>empty?</id>
<description>
 Is the element count zero?
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>generator</id>
<description>
 Generic traversal of an aggregate.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<fn>
<id>Generator</id>
<id>S</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>map</id>
<description>
 Form new aggregate using function.
</description>
<type>
<fn_type>
<left>
<fn_type>
<left>
<id>S</id>
</left>
<right>
<id>S</id>
</right>
</fn_type>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>#</id>
<description>
 Count of the number of elements.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>SingleInteger</id>
</right>
</fn_type>
</type>
</export>
</exports>
<item_type>CATEGORY</item_type>
<id>Aggregate</id>
<description>
 `Aggregate(S)' provides operations for manipulating structures
representing collections of values of type `S'.

Author: AXIOM-XL library
Date Created: 1992-94
Keywords: aggregate, collection, container
</description>
<parameters>
<parameter>
<id>S</id>
<id>Type</id>
</parameter>
</parameters>
<directinh>
<type>
<id>BasicType</id>
</type>
</directinh>
<exports>
<export>
<id>=</id>
<description>
 Equality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>~=</id>
<description>
 Inequality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>TextWriter</id>
<id>%</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<fn_type>
<left>
<id>TextWriter</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</right>
</fn_type>
</type>
</export>
<export>
<id>sample</id>
<description>
 Example element.
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>hash</id>
<description>
 Hashing function.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>SingleInteger</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>case</id>
<description>
 for 'select' statements;
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>empty?</id>
<description>
 Is the element count zero?
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>generator</id>
<description>
 Generic traversal of an aggregate.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<fn>
<id>Generator</id>
<id>S</id>
</fn>
</right>
</fn_type>
</type>
</export>
<export>
<id>map</id>
<description>
 Form new aggregate using function.
</description>
<type>
<fn_type>
<left>
<fn_type>
<left>
<id>S</id>
</left>
<right>
<id>S</id>
</right>
</fn_type>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
</exports>
<item_type>CATEGORY</item_type>
<id>Conditional</id>
<description>
 `Conditional' allows values to be used in conditional context,
such as in an `if' or in a `while'.

Author: AXIOM-XL library
Date Created: 1992-94
Keywords: test, conditional, generic
</description>
<parameters>
</parameters>
<directinh>
<type>
<id>BasicType</id>
</type>
</directinh>
<exports>
<export>
<id>=</id>
<description>
 Equality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>~=</id>
<description>
 Inequality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>TextWriter</id>
<id>%</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<fn_type>
<left>
<id>TextWriter</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</right>
</fn_type>
</type>
</export>
<export>
<id>sample</id>
<description>
 Example element.
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>hash</id>
<description>
 Hashing function.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>SingleInteger</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>case</id>
<description>
 for 'select' statements;
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>test</id>
<description>
 Test used in conditional context.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
</exports>
<item_type>CATEGORY</item_type>
<id>Logic</id>
<description>
 `Logic' provides the basic operations for lattices,
e.g., boolean algebra.

Author: AXIOM-XL library
Date Created: 1992-94
Keywords: logic, boolean
</description>
<parameters>
</parameters>
<directinh>
<type>
<id>BasicType</id>
</type>
</directinh>
<exports>
<export>
<id>=</id>
<description>
 Equality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>~=</id>
<description>
 Inequality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>TextWriter</id>
<id>%</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<fn_type>
<left>
<id>TextWriter</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</right>
</fn_type>
</type>
</export>
<export>
<id>sample</id>
<description>
 Example element.
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>hash</id>
<description>
 Hashing function.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>SingleInteger</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>case</id>
<description>
 for 'select' statements;
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>~</id>
<description>
 Logical complement.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>/\</id>
<description>
 Logical `meet', e.g. `and'.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>\/</id>
<description>
 Logical `join', e.g. `or'.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>xor</id>
<description>
 `Exclusive or'
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>%</id>
</right>
</fn_type>
</type>
</export>
</exports>
<item_type>CATEGORY</item_type>
<id>BasicType</id>
<description>
 `BasicType' is a basic category to which most types belong.

Author: AXIOM-XL library
Date Created: 1992-94
Keywords: type
</description>
<parameters>
</parameters>
<directinh>
<type>
</type>
</directinh>
<exports>
<export>
<id>=</id>
<description>
 Equality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>~=</id>
<description>
 Inequality test.
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>TextWriter</id>
<id>%</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>_<_<</id>
<description>
 Basic output.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<fn_type>
<left>
<id>TextWriter</id>
</left>
<right>
<id>TextWriter</id>
</right>
</fn_type>
</right>
</fn_type>
</type>
</export>
<export>
<id>sample</id>
<description>
 Example element.
</description>
<type>
<id>%</id>
</type>
</export>
<export>
<id>hash</id>
<description>
 Hashing function.
</description>
<type>
<fn_type>
<left>
<id>%</id>
</left>
<right>
<id>SingleInteger</id>
</right>
</fn_type>
</type>
</export>
<export>
<id>case</id>
<description>
 for 'select' statements;
</description>
<type>
<fn_type>
<left>
<id>%</id>
<id>%</id>
</left>
<right>
<id>Boolean</id>
</right>
</fn_type>
</type>
</export>
</exports>
