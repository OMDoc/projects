<?xml version="1.0" encoding="utf-8" ?>
<!-- Document Automatically Generated by TPS3 by cebrown -->
<!-- on Sunday, July 26, 2009 at 22:00:43. -->
<!-- From to TPS library file:
/c/tps/library/distributed/gwff.lib
 -->
<omdoc xmlns='http://omdoc.org/ns' xmlns:dc='http://purl.org/dc/elements/1.1/' xml:id="tps.gwff.CS-DUC-RELNS">
<metadata>
<dc:title>tps.gwff.CS-DUC-RELNS</dc:title>
<dc:date>2009-07-26T22:00:43</dc:date>
<dc:creator role="aut">The TPS Project</dc:creator>
<dc:creator role="trc">cebrown</dc:creator>
<dc:format>application/omdoc+xml</dc:format>
<dc:type>Dataset</dc:type>
<dc:source>The TPS library: http://gtps.math.cmu.edu/tps.html</dc:source>
<dc:rights>Copyright (c) 2009 The TPS project in the Department of Mathematical Sciences at Carnegie Mellon University</dc:rights>
<license xmlns="http://creativecommons.org/ns">
<permissions reproduction="permitted" distribution="permitted"
derivative_works="permitted"/>
<prohibitions commercial_use="permitted"/>
<requirements notice="required" attribution="required" copyleft="required"/></license>
</metadata>
<theory xml:id="tps.gwff.CS-DUC-RELNS">
<imports from="tps.abbr.CLOS-SYS2.omdoc#tps.abbr.CLOS-SYS2"/><imports from="tps.abbr.S-DUC.omdoc#tps.abbr.S-DUC"/><assertion type="theorem" xml:id="gwff.CS-DUC-RELNS">
<CMP>
   Given a pairing algebra B (with zero element 0(B) and pairing operation P(BBB)),
we can define a notion of join and a notion of
inclusion.  A subset of the pairing algebra is a DUC-set (downward union closed)
if it is downward closed with respect to inclusion, and closed with respect to
joins.  A relation R between any set C and the pairing algebra is DUC-valued if
for any c in C, {y | R(c,y)} is a DUC-set.  The theorem CS-DUC-RELNS states that
the DUC-valued relations form a closure system, i.e., 
an arbitrary intersection of DUC-valued relations is a DUC-valued relation.

CS-DUC-RELNS: CLOS-SYS2(O(O(OBC))).LAMBDA R(OBC) FORALL c(C) S-DUC(O(OB)(BBB)B) 0(B) P(BBB).R c

   To prove the theorem, the definitions of join and inclusion are irrelevant
(they do not need to be instantiated).  Even without instantiating these definitions,
the search space is quite large, as many literals have flexible heads, allowing
them to unify with any other literal.  TPS finds a proof after about 6 hrs.
CLOS-SYS2(O(O(OBC))).LAMBDA R(OBC) FORALL c(C) S-DUC(O(OB)(BBB)B) 0(B) P(BBB).R c</CMP><FMP><OMOBJ xmlns='http://www.openmath.org/OpenMath'><OMBIND><OMS cd="simpletypes" name="all-types"/><OMBVAR> <OMV name="B"/> <OMV name="C"/></OMBVAR><OMA><OMS cd="tps.abbr.CLOS-SYS2" name="abbr.CLOS-SYS2"/>
 <OMBIND><OMS cd="lambda-calc" name="lambda"/>
 <OMBVAR>
   <OMATTR>
  <OMATP>
   <OMS cd="simpletypes" name="oftype"/>
  <OMA>
   <OMS cd="simpletypes" name="funtype"/>
    <OMV name="C"/>
  <OMA>
   <OMS cd="simpletypes" name="funtype"/>
    <OMV name="B"/>
    <OMS cd="truthval" name="bool"/>
   </OMA>
   </OMA>
  </OMATP>
<OMV name="R"/>
</OMATTR>

 </OMBVAR>
 <OMBIND><OMS cd="sthol" name="forall"/>
 <OMBVAR>
   <OMATTR>
  <OMATP>
   <OMS cd="simpletypes" name="oftype"/>
    <OMV name="C"/>
  </OMATP>
<OMV name="c"/>
</OMATTR>

 </OMBVAR>
 <OMA><OMS cd="tps.abbr.S-DUC" name="abbr.S-DUC"/>
 <OMV name="a0"/>
 <OMV name="P"/>
 <OMA><OMV name="R"/>
 <OMV name="c"/>
 </OMA> </OMA></OMBIND></OMBIND> </OMA></OMBIND></OMOBJ></FMP></assertion>
</theory>
</omdoc>
